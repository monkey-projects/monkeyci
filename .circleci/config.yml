version: 2.1

orbs:
  terraform: circleci/terraform@3.2.0

executors:
  clj:
    docker:
      - image: cimg/clojure:1.11.1-openjdk-17.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
  cljs:
    docker:
      - image: cimg/clojure:1.11.1-node
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        
jobs:
  test-script-lib:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "lib/deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Dependencies
          command: clojure -X:test:junit:deps prep
          working_directory: lib
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "lib/deps.edn" }}
      - run:
          name: Unit tests
          command: clojure -X:test:junit
          working_directory: lib
      - store_test_results:
          path: lib/junit.xml

  deploy-script-lib:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - lib-deps-{{ checksum "lib/deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - lib-deps-
      - run:
          name: Dependencies
          command: clojure -X:jar:deps prep
          working_directory: lib
      - save_cache:
          paths:
            - ~/.m2
          key: lib-deps-{{ checksum "lib/deps.edn" }}
      - run:
          name: Build Jar
          command: clojure -X:jar
          working_directory: lib
      - run:
          name: Deploy to Clojars
          command: clojure -X:jar:deploy
          working_directory: lib

  test-app:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - app-deps-{{ checksum "app/deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - app-deps-
      - run:
          name: Dependencies
          command: clojure -X:test:junit:deps prep
          working_directory: app
      - save_cache:
          paths:
            - ~/.m2
          key: app-deps-{{ checksum "app/deps.edn" }}
      - run:
          name: Unit tests
          command: clojure -M:test:junit
          working_directory: app
      - store_test_results:
          path: app/junit.xml

  app-uberjar:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - uberjar-deps-{{ checksum "app/deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - uberjar-deps-
      - run:
          name: Dependencies
          command: clojure -X:jar:deps prep
          working_directory: app
      - save_cache:
          paths:
            - ~/.m2
          key: uberjar-deps-{{ checksum "app/deps.edn" }}
      - run:
          name: Build Uberjar
          command: clojure -X:jar:uber
          working_directory: app
      - store_artifacts:
          path: app/target/monkeyci-standalone.jar
      - persist_to_workspace:
          root: app/target
          paths: [*.jar]

  test-self:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - self-deps-{{ checksum "app/deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - self-deps-
      - run:
          name: Build using MonkeyCI
          command: clojure -M:run -w .. build -p test
          working_directory: app
      - save_cache:
          paths:
            - ~/.m2
          key: self-deps-{{ checksum "app/deps.edn" }}

  test-hook:
    executor: cljs
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-hook-{{ checksum "hook/shadow-cljs.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-hook-
      - run:
          name: Dependencies
          command: npm install
          working_directory: hook
      - save_cache:
          paths:
            - hook/node-modules
          key: v1-dependencies-hook-{{ checksum "hook/shadow-cljs.edn" }}
      - run:
          name: Compile
          command: npx shadow-cljs compile test
          working_directory: hook
      - run:
          name: Unit tests
          command: node out/node-tests.js
          working_directory: hook
        # TODO Output as junit or another format CircleCI can understand
          
  docker:
    executor: clj
    environment:
      IMAGE_TAG: dormeur/monkey-ci:build-$CIRCLE_BUILD_NUM
    steps:
      - checkout
      - setup_remote_docker
      # Restore the uberjar file
      - attach_workspace:
          at: app/target
      # Build the image, tag it with the current job number
      - run:
          name: Build image
          command: docker build -t $IMAGE_TAG .
          working_directory: app
      - run:
          name: Docker login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Push image
          command: docker push $IMAGE_TAG
          
workflows:
  version: 2
  full-build:
    jobs:
      - test-script-lib
      - deploy-script-lib:
          context: clojars-monkeyci
          requires:
            - test-script-lib
          filters:
            branches:
              only: [main]
      - test-app
      - app-uberjar:
          requires:
            - test-app
          filters:
            branches:
              only: [main]
      - test-hook
      - test-self
      - docker:
          requires:
            - app-uberjar
          context: docker
